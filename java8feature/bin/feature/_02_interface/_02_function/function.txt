
@1. Functional interfaces provide target types for lambda expressions and method references. 
	Each functional interface has a single abstract method, called the functional method for 
	that functional interface, to which the lambda expression's parameter and return types are 
	matched or adapted. Functional interfaces can provide a target type in multiple contexts, 
	such as assignment context, method invocation, or cast context:
	
	// Assignment context
    Predicate<String> p = String::isEmpty;

    // Method invocation context
    stream.filter(e -> e.getSize() > 10)...

    // Cast context
    stream.map((ToIntFunction) e -> e.getSize())...
    
@2. The interfaces in this package are annotated with FunctionalInterface. This annotation is not a 
	requirement for the compiler to recognize an interface as a functional interface, but merely an aid 
	to capture design intent and enlist the help of the compiler in identifying accidental violations of 
	design intent.
	
@3. The functional interfaces in this package follow an extensible naming convention, as follows:
	
	@3.1. There are several basic function shapes, including 
			Function (unary function from T to R), 
			Consumer (unary function from T to void), 
			Predicate (unary function from T to boolean), and 
			Supplier (nilary function to R).
			
	@3.2  Function shapes have a natural arity based on how they are most commonly used. 
		 	The basic shapes can be modified by an arity prefix to indicate a different arity, 
		 	such as BiFunction (binary function from T and U to R).
		 
	@3.3. There are additional derived function shapes which extend the basic function shapes, including 
			UnaryOperator (extends Function) and 
			BinaryOperator (extends BiFunction).
			
	@3.4. Type parameters of functional interfaces can be specialized to primitives with additional type 
			prefixes. To specialize the return type for a type that has both generic return type and generic 
			arguments, we prefix ToXxx, as in ToIntFunction. Otherwise, type arguments are specialized 
			left-to-right, as in DoubleConsumer or ObjIntConsumer. 
			(The type prefix Obj is used to indicate that we don't want to specialize this parameter, 
			but want to move on to the next parameter, as in ObjIntConsumer.) These schemes can be combined, 
			as in IntToDoubleFunction.
		
	@3.5. If there are specialization prefixes for all arguments, the arity prefix may be left out 
		  (as in ObjIntConsumer).
	
@4.	Java Built-in Functional Interfaces
  
	  To represent a function that takes an argument of type T and returns a result of type R.
	  Function - public R apply(T t);
	  
	  To represent a function that takes two arguments of types T and U, and returns a result of type R.
	  BiFunction - public R apply(T t, U u);
	  
	  To represent a boolean function that returns true or false for the specified argument.
	  Predicate- public boolean test(T  t);
	  
	  To represent a boolean function that returns true or false for the two specified arguments.
	  BiPredicate - public boolean test(T t, U u);
	  
	  To represent an operation that takes an argument and returns no result.
	  Consumer- public void accept(T t);
	  
	  To represent an operation that takes two arguments and returns no result.
	  BiConsumer- public void accept(T t, U  u);
	  
	  To represent a function that returns a value as of type T.
	  Supplier- public T get();
	  
	  To represent a function that takes an argument and returns a result of the same type.
	  UnaryOperator- public T  apply(T t);
	  
	  To represent a function that takes two arguments and returns a result of the same type.
	  BinaryOperator - public T apply(T t1, T t2);
	
	